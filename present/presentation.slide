Will you take that API to Go?
Pixels Camp
23 Mar 2019
Tags: API, Server, Testing

Tiago Mendes
Volkswagen Digital Lab Lisbon
tiago@vw-dilab.com

* Why Go?
.image img/GO_LEARN.png _ 500

* Simplicity and Explicitness
.play ../snippets/server/main.go

* Standard Library 
.play ../snippets/json/main.go  /^func main/,/^}/

* Concurrency
.play ../snippets/concurrency/main.go /START OMIT/,/END OMIT/

* Other Advantages
- Designed to improve programming productivity
- Built with modern use cases in mind
- Testing framework out of the box
- _Batteries_ _included_

* Go... Huh, yeah, what is it good for?
.image img/DEATH_METAL_GOPHER.png _ 500

* Some examples

- Web Servers
- Command line utilities
- Crawlers
- Proxies
- OS Stuff

* Famous Go projects
- [[https://github.com/docker/docker-ce][Docker]]
- [[https://github.com/kubernetes/kubernetes][Kubernetes]]
- [[https://github.com/hashicorp][Hashicorp (Vault, Terraform, Consul)]]
- [[https://github.com/mholt/caddy][Caddy]]
- [[https://github.com/prometheus/prometheus][Prometheus]]
- [[https://github.com/gohugoio/hugo][Hugo]]
- [[https://github.com/ethereum/go-ethereum][Ethereum]]
- [[https://github.com/influxdata/influxdb][InfluxDB]]


* (even more) Stranger things...
.image img/StrangerThingsGophers.png _ 500

* Composition vs Inheritance
.code ../snippets/json/main.go /^type People/,/^}/

* 
.code ../snippets/json/main.go /^type PeopleAPI/,/^}/


* Interface implementation
.code ../snippets/interfaces/main.go 


* Error handling
.code ../snippets/errors/main.go /START OMIT/,/END OMIT/

* 
.code ../snippets/errors/main.go  /^func uselessFunc/,/^}/

* 
.play ../snippets/errors/main.go  /^func main/,/^}/

* Good to know
- It's common to see concise, short variable names (`r` , `w` , `err` , `b` , etc.);
- There are no generics;
- There are no functional style helpers (e.g. `forEach` , `map` , etc.) out of the box;
- No private, protected or public concept - exported or unexported instead;
- Comments are mandatory (by linting) on exported variables and functions;
- Unused imports or variables result in a compilation error;
- You need to deal with pointers.

* GopherEats API
.image img/CouchPotatoGopher.png _ 500

* Placing an Order
* The Order Client
.code ../internal/order/client.go  /^type Client/,/^}/

* Marshalling the Request Body
.code ../internal/order/client.go /FIRST OMIT/,/ENDFIRST OMIT/

* Making the Request
.code ../internal/order/client.go /SEC OMIT/,/ENDSEC OMIT/

* Handling Results
.code ../internal/order/client.go /THIRD OMIT/,/ENDTHIRD OMIT/

* Testing It
* 
.code ../internal/order/client_test.go /A OMIT/,/ENDA OMIT/

* 
.code ../internal/order/client_test.go /B OMIT/,/ENDB OMIT/

* 
.code ../internal/order/client_test.go /C OMIT/,/ENDC OMIT/

* Let's collect some restaurants!
* A Crawler
.code ../internal/platform/yelp/singlecrawler.go /^func SimpleCrawl/,/^}/

* Using it
.code ../cmd/crawler/single/main.go /^func main/,/^}/

* Concurrency & Persistence
.code ../internal/platform/yelp/yelp.go /^type DBConnection/,/^}/

.code ../internal/platform/yelp/crawler.go /^type Crawler/,/^}/

* 
.code ../internal/platform/yelp/crawler.go /START OMIT/,/END OMIT/

* Using It
.code ../internal/platform/yelp/crawler.go /^func Crawl/,/^}/

* 
.code ../internal/platform/yelp/crawler.go /^func extractRestaurant/,/^}/

* Testing It
* Database Mock
.code ../internal/platform/yelp/crawler_test.go /MOCK OMIT/,/ENDMOCK OMIT/

* Yelp Server Mock
.code ../internal/platform/yelp/crawler_test.go /YELP OMIT/,/ENDYELP OMIT/

* The Test
.code ../internal/platform/yelp/crawler_test.go /TEST OMIT/,/ENDTEST OMIT/


* Going Live!
* Orders handler
.code ../cmd/handlers/orders.go  /ORDERONE OMIT/,/ENDORDERONE OMIT/

* 
.code ../cmd/handlers/orders.go  /ORDERTWO OMIT/,/ENDORDERTWO OMIT/

* Restaurants handler
.code ../cmd/handlers/restaurants.go  /^func CrawlYelp/,/^}/

* Testing the Handlers
* Table Driven Tests
.code ../cmd/handlers/orders_test.go   /TDT OMIT/,/ENDTDT OMIT/

* Ranging Over Tests
.code ../cmd/handlers/orders_test.go   /RUN OMIT/,/ENDRUN OMIT/

* Verifying
.code ../cmd/handlers/orders_test.go   /ASSERT OMIT/,/ENDASSERT OMIT/

* The Server
.code ../cmd/main.go /^func main/,/^}/

* Serve Mux
.code ../cmd/mux/main.go /^func main/,/^}/


* Project Layout
.image img/GOPHER_ROCKS.png _ 500


    
* Common Structure
    /cmd
Contains all programs belonging to the project

    /internal
Packages that need to be imported by programs within the project (cannot be imported by external programs)

    /internal/platform
Packages that support the project (database connectors, logging, etc.)

* Common Structure (Cont.)

    /pkg
Packages that should be imported by external programs

    /vendor
Contains third party libraries (becoming deprecated with go modules)



* Good Practices
.image img/GOPHER_STAR_WARS.png _ 500

* General
- Less is more, so consider if you really need a framework; a Go project can virtually run without dependencies;
- Use short and descriptive names for variables ( `count` instead of `c`, `cust` instead of `customer` );
- Single letter variables are OK to use in limited scope situations (such as loop indices);
- Use scoping to guide you in naming (the farther away, the more descriptive the name should be);
- Avoid stuttering when naming package functions (prefer log.Info over log.LogInfo)

* Package Naming
- Package naming and organization will have a huge impact on Go code
- Package names should describe their purpose 
- They should be short (e.g. trasnsport and not transportmecahnisms)
- They should be clear, and describe external dependency (bytes, postgres)
- Avoid catchall packages (util, helpers)
- Package organization has a big impact on testability

* Package Organization
- Avoid creating too many or too few packages
- Packages should contain code that has one purpose (e.g. archive, crypto, order)
- Sometimes you need to organize packages under a parent, for organizational purposes
- Consider organizing packages by domain
- More on this: [[https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1][Ben Johnson]] 

* Resources
.image img/GOPHER_SAFARI.png _ 500

* Useful Links
.link https://github.com/golang-standards/project-layout Project Layout
.link https://go-proverbs.github.io/ Go Proverbs
.link https://talks.golang.org/2012/concurrency.slide#1 Go Concurrency Patterns
.link https://speakerdeck.com/mitchellh/advanced-testing-with-go Hashimoto, Advanced Testing in Go
.link https://medium.com/@benbjohnson/structuring-tests-in-go-46ddee7a25c Ben Johnson, Testing in Go
.link https://gobyexample.com/pointers Go by Example

* Useful Links (MORE)
.link https://www.youtube.com/watch?v=8hQG7QlcLBk Hashimoto, Advanced Testing in Go (Video)
.link https://www.youtube.com/watch?v=MzTcsI6tn-0 Ashley McNamara + Brian Ketelsen, Go best practices (Video)
.link https://www.youtube.com/watch?v=yi5A3cK1LNA&t=443s Blake Mizerany, Three fallacies of dependencies(Video)
.link https://github.com/upspin/upspin Upspin (Inspiration)
.link https://github.com/kubernetes/kubernetes Kubernetes (Inspiration)
.link https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html Package Oriented Design (William Kennedy)



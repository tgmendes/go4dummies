Will you take that API to Go?
Pixels Camp
21 Mar 2019
Tags: API, Server, Testing

Tiago Mendes
Software Engineer
Volkswagen Software Development Center Lisbon
tiago@vw-dilab.com
@tiagogmendes
@VWDS_SDCLX


* Who Am I?
.image img/BATMAN_GOPHER.png _ 500

* About Me
- Software Developer since 2014
- Main programming languages: Go, Python, JavaScript
- Joined Volkswagen SDC on July 2018
- Using Go since July 2018 
- Guitar player and summer surfer!


* Facts about Go (aka Wikipedia copy/paste)
.image img/7TH_BIRTHDAY.png _ 500

* 
- Designed by Robert Griesemer, Rob Pike and Ken Thompson
- Fist release: November 2009
- Created at Google to increase programming productivity in the modern world
- Motivation: shared dislike of C++

* Go... "Huh, yeah, what is it good for?"
.image img/DEATH_METAL_GOPHER.png _ 500


* Some examples

- Web servers
- Command line utilities
- Crawlers
- Proxies
- OS stuff

* Famous Go projects
- [[https://github.com/docker/docker-ce][Docker]]
- [[https://github.com/kubernetes/kubernetes][Kubernetes]]
- [[https://github.com/hashicorp][Hashicorp (Vault, Terraform, Consul)]]
- [[https://github.com/mholt/caddy][Caddy]]
- [[https://github.com/prometheus/prometheus][Prometheus]]
- [[https://github.com/gohugoio/hugo][Hugo]]
- [[https://github.com/ethereum/go-ethereum][Ethereum]]
- [[https://github.com/influxdata/influxdb][InfluxDB]]

* Why Go?
.image img/GO_LEARN.png _ 500

* Simplicity and Explicitness
A simple web server:
.play ../snippets/server/main.go

* Standard Library 
Reading (unmarshaling) a JSON file:
.play ../snippets/json/main.go  /^func main/,/^}/

* Concurrency
.play ../snippets/concurrency/main.go /START OMIT/,/END OMIT/

* Other Advantages
- Built with modern use cases in mind
- Testing framework out of the box
- Fast and lightweight
- _Batteries_ _included_
- Fun (personal opinion)


* Go in a Nutshell
.image img/BUFFALO_CASTS.png _ 500

* Exported/unexported
- Similar to a public/protected concept;
- Done by capitalization:

.code ../snippets/exported/exported.go
* Defer
Defer delays the code execution to the end: 

.play ../snippets/deferex/deferex.go

* Pointers
A pointer holds the memory address of a value:

.play ../snippets/pointers/pointers.go

* Structs
Typed collections of fields:

.play ../snippets/structs/structs.go /START OMIT/,/END OMIT/

* Channels
_"Channels_ _are_ _the_ _pipes_ _that_ _connect_ _concurrent_ _goroutines_. _You_ 
_can_ _send_ _values_ _into_ _channels_ _from_ _one_ _goroutine_ _and_ _receive_ _those_ 
_values_ _into_ _another_ _goroutine."_

.play ../snippets/chanex/chanex.go

* Strange things...
.image img/StrangerThingsGophers.png _ 500

* Composition
.code ../snippets/json/main.go /^type Film/,/^}/
.code ../snippets/json/main.go /^type Species/,/^}/
.code ../snippets/json/main.go /^type Vehicle/,/^}/
.code ../snippets/json/main.go /^type Starship/,/^}/

* Composition (cont.)
.code ../snippets/json/main.go /^type People/,/^}/


* Interfaces
"Duck typing" (at compile time)
.code ../snippets/interfaces/main.go 


* Error handling
.code ../snippets/errors/main.go /START OMIT/,/END OMIT/

* Error handling (cont.)
.code ../snippets/errors/main.go  /^func uselessFunc/,/^}/

* Error handling (cont.)
.play ../snippets/errors/main.go  /^func main/,/^}/

* Good to know
- It's common to see concise, short variable names (`r` , `w` , `err` , `b` , etc.);
- There are no generics;
- There are no functional style helpers (e.g. `forEach` , `map` , etc.) out of the box;
- No private, protected or public concept - exported or unexported instead;
- Comments are mandatory (by linting) on exported variables and functions;
- Unused imports or variables result in a compilation error;
- You need to deal with pointers.

* GopherEats API
.image img/CouchPotatoGopher.png _ 500

* What we're building
.image img/GopherEats.png _ 1000


* Placing an Order
.image img/GopherEatsOrderClient.png _ 1000

* The Order Client
.code ../internal/order/client.go  /^type Client/,/^}/

* Marshalling the Request Body
.code ../internal/order/client.go /FIRST OMIT/,/ENDFIRST OMIT/

* Making the Request
.code ../internal/order/client.go /SEC OMIT/,/ENDSEC OMIT/

* Handling Results
.code ../internal/order/client.go /THIRD OMIT/,/ENDTHIRD OMIT/

* Testing It
* 
.code ../internal/order/client_test.go /A OMIT/,/ENDA OMIT/

* 
.code ../internal/order/client_test.go /B OMIT/,/ENDB OMIT/

* 
.code ../internal/order/client_test.go /C OMIT/,/ENDC OMIT/

* Let's collect some restaurants!
.image img/GopherEatsRestaurantCrawler.png _ 1000

* A Crawler
.code ../internal/platform/yelp/singlecrawler.go /^func SimpleCrawl/,/^}/

* Using it
.code ../cmd/crawler/single/main.go /^func main/,/^}/

* Concurrency & Persistence
.code ../internal/platform/yelp/yelp.go /^type DBConnection/,/^}/

.code ../internal/platform/yelp/crawler.go /^type Crawler/,/^}/

* 
.code ../internal/platform/yelp/crawler.go /START OMIT/,/END OMIT/

* Using It
.code ../internal/platform/yelp/crawler.go /^func Crawl/,/^}/

* 
.code ../internal/platform/yelp/crawler.go /^func extractRestaurant/,/^}/

* Testing It
* Database Mock
.code ../internal/platform/yelp/crawler_test.go /MOCK OMIT/,/ENDMOCK OMIT/

* Yelp Server Mock
.code ../internal/platform/yelp/crawler_test.go /YELP OMIT/,/ENDYELP OMIT/

* The Test
.code ../internal/platform/yelp/crawler_test.go /TEST OMIT/,/ENDTEST OMIT/


* Going Live!
* Orders handler
.image img/GopherEatsOrdersHandler.png _ 1000

* 
.code ../cmd/handlers/orders.go  /ORDERONE OMIT/,/ENDORDERONE OMIT/

* 
.code ../cmd/handlers/orders.go  /ORDERTWO OMIT/,/ENDORDERTWO OMIT/

* Restaurants handler
.image img/GopherEatsRestaurantHandler.png _ 1000

* 
.code ../cmd/handlers/restaurants.go  /^func CrawlYelp/,/^}/

* Testing the Handlers
* Table Driven Tests
.code ../cmd/handlers/orders_test.go   /TDT OMIT/,/ENDTDT OMIT/

* Ranging Over Tests
.code ../cmd/handlers/orders_test.go   /RUN OMIT/,/ENDRUN OMIT/

* Verifying
.code ../cmd/handlers/orders_test.go   /ASSERT OMIT/,/ENDASSERT OMIT/

* The Server
.image img/GopherEatsServer.png _ 1000

* 
.code ../cmd/main.go /^func main/,/^}/

* ServeMux (Multiplexer)
.code ../cmd/mux/main.go /^func main/,/^}/

* Good Practices
.image img/GOPHER_STAR_WARS.png _ 500

* General
- Less is more, so consider if you really need a framework; a Go project can virtually run without dependencies
- Use short and descriptive names for variables ( `count` instead of `c`, `cust` instead of `customer` )
- Single letter variables are OK to use in limited scope situations (such as loop indices)
- Use scoping to guide you in naming (the farther away, the more descriptive the name should be)

* Package Naming
- Package naming and organization will have a huge impact on Go code and testability
- Package names should describe their purpose 
- They should be short (e.g. `transport` and not `transportmecahnisms`)
- They should be clear, and describe external dependency (`bytes`, `postgres`)
- Avoid catchall packages (`util`, `helpers`)
- Avoid stuttering when naming package functions (prefer `log.Info` over `log.LogInfo`)

* Package Organization
- Avoid creating too many or too few packages
- Packages should contain code that has one purpose (e.g. `archive`, `crypto`, `order`)
- Consider organizing packages by domain (more on this: [[https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1][Ben Johnson]])

* Resources
.image img/GOPHER_SAFARI.png _ 500

* Useful Links
.link https://github.com/golang-standards/project-layout Project Layout
.link https://go-proverbs.github.io/ Go Proverbs
.link https://talks.golang.org/2012/concurrency.slide#1 Go Concurrency Patterns
.link https://speakerdeck.com/mitchellh/advanced-testing-with-go Hashimoto, Advanced Testing in Go
.link https://medium.com/@benbjohnson/structuring-tests-in-go-46ddee7a25c Ben Johnson, Testing in Go
.link https://gobyexample.com Go by Example

* Useful Links (MORE)
.link https://www.youtube.com/watch?v=8hQG7QlcLBk Hashimoto, Advanced Testing in Go (Video)
.link https://www.youtube.com/watch?v=MzTcsI6tn-0 Ashley McNamara + Brian Ketelsen, Go best practices (Video)
.link https://www.youtube.com/watch?v=yi5A3cK1LNA&t=443s Blake Mizerany, Three fallacies of dependencies (Video)
.link https://github.com/upspin/upspin Upspin (Inspiration)
.link https://github.com/kubernetes/kubernetes Kubernetes (Inspiration)
.link https://www.ardanlabs.com/blog/2017/02/package-oriented-design.html Package Oriented Design (William Kennedy)

* Gopher Artwork
.link https://twitter.com/ashleymcnamara @ashleymcnamara
.link https://github.com/ashleymcnamara/gophers Repo

.image img/VW_logo.png _ 400


* Let's (re)start a community?
.link http://bit.ly/2TNTEbW http://bit.ly/2TNTEbW 
.image img/GoCommunity.png _ 1000


* Visit us!
Rua do Sol ao Rato, 11 
.image img/IMG_0497.jpg _ 600


